-- ============================================
-- AUTO PARRY SYSTEM - CORE ONLY
-- ============================================

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- ============================================
-- CONFIGURATION
-- ============================================

local MIN_DISTANCE = 1.5
local MAX_DISTANCE = 100
local UPDATE_INTERVAL = 0.0001
local PARRY_COOLDOWN = 0.3
local HIGH_SPEED_THRESHOLD = 300
local PLAYER_DETECTOR_DISTANCE = 17

-- ============================================
-- STATE VARIABLES
-- ============================================

local autoParryEnabled = true
local currentParryDistance = 34
local targetParryDistance = 34
local lastParryTime = 0
local lastDistanceUpdate = 0
local visualSphere = nil
local playerDetectorSpheres = {}
local isAutoParryFrozen = false
local frozenParryDistance = 34
local isHighSpeedMode = false

-- ============================================
-- FUNÇÕES DE SUPORTE
-- ============================================

local function createVisualSphere()
    if visualSphere then
        visualSphere:Destroy()
    end
    
    visualSphere = Instance.new("Part")
    visualSphere.Name = "VisualDetector"
    visualSphere.Shape = Enum.PartType.Ball
    visualSphere.Material = Enum.Material.ForceField
    visualSphere.Color = Color3.fromRGB(100, 100, 255)
    visualSphere.Transparency = 0.7
    visualSphere.CanCollide = false
    visualSphere.Anchored = true
    visualSphere.Parent = workspace
end

local function createPlayerDetectorSpheres()
    for _, sphere in pairs(playerDetectorSpheres) do
        if sphere then
            sphere:Destroy()
        end
    end
    playerDetectorSpheres = {}
    
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            local hrp = player.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                local sphere = Instance.new("Part")
                sphere.Name = "PlayerDetector_" .. player.Name
                sphere.Shape = Enum.PartType.Ball
                sphere.Material = Enum.Material.ForceField
                sphere.Color = Color3.fromRGB(100, 255, 100)
                sphere.Transparency = 0.7
                sphere.CanCollide = false
                sphere.Anchored = true
                sphere.Size = Vector3.new(PLAYER_DETECTOR_DISTANCE * 2, PLAYER_DETECTOR_DISTANCE * 2, PLAYER_DETECTOR_DISTANCE * 2)
                sphere.Parent = workspace
                
                playerDetectorSpheres[player.Name] = sphere
            end
        end
    end
end

local function updatePlayerDetectorSpheres()
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            local hrp = player.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                if not playerDetectorSpheres[player.Name] or not playerDetectorSpheres[player.Name].Parent then
                    local sphere = Instance.new("Part")
                    sphere.Name = "PlayerDetector_" .. player.Name
                    sphere.Shape = Enum.PartType.Ball
                    sphere.Material = Enum.Material.ForceField
                    sphere.Color = Color3.fromRGB(100, 255, 100)
                    sphere.Transparency = 0.7
                    sphere.CanCollide = false
                    sphere.Anchored = true
                    sphere.Size = Vector3.new(PLAYER_DETECTOR_DISTANCE * 2, PLAYER_DETECTOR_DISTANCE * 2, PLAYER_DETECTOR_DISTANCE * 2)
                    sphere.Parent = workspace
                    playerDetectorSpheres[player.Name] = sphere
                end
                
                playerDetectorSpheres[player.Name].Position = hrp.Position
            end
        end
    end
end

local function clearPlayerDetectorSpheres()
    for _, sphere in pairs(playerDetectorSpheres) do
        if sphere then
            sphere:Destroy()
        end
    end
    playerDetectorSpheres = {}
end

local function getBallVelocity(ball)
    if ball:IsA("BasePart") then
        return ball.AssemblyLinearVelocity.Magnitude
    end
    
    for _, child in pairs(ball:GetDescendants()) do
        if child:IsA("BasePart") then
            return child.AssemblyLinearVelocity.Magnitude
        end
    end
    
    return 0
end

local function calculateDistance(velocity)
    if velocity >= HIGH_SPEED_THRESHOLD then
        return MAX_DISTANCE
    end
    
    local normalizedVelocity = math.clamp(velocity / 100, 0, 1)
    local distance = MIN_DISTANCE + (MAX_DISTANCE - MIN_DISTANCE) * normalizedVelocity
    distance = math.floor(distance * 2 + 0.5) / 2
    return math.clamp(distance, MIN_DISTANCE, MAX_DISTANCE)
end

local function executeParry()
    local currentTime = tick()
    if currentTime - lastParryTime < PARRY_COOLDOWN then
        return
    end
    
    lastParryTime = currentTime
    
    local args = {
        [1] = "SwordService",
        [2] = "Block",
        [3] = {
            [1] = -0.759547233581543
        }
    }
    
    pcall(function()
        ReplicatedStorage.Framework.RemoteFunction:InvokeServer(unpack(args))
    end)
end

local billboardCache = {}

local function createSpeedLabel(ball)
    if billboardCache[ball] then
        return billboardCache[ball]
    end
    
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "SpeedLabel"
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(0, 100, 0, 40)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.Parent = ball
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255, 255, 100)
    label.TextSize = 18
    label.Font = Enum.Font.GothamBold
    label.TextStrokeTransparency = 0.5
    label.Parent = billboard
    
    billboardCache[ball] = {Billboard = billboard, Label = label}
    return billboardCache[ball]
end

local function getBallPosition(ball)
    if ball:IsA("BasePart") then
        return ball.Position
    else
        for _, child in pairs(ball:GetDescendants()) do
            if child:IsA("BasePart") then
                return child.Position
            end
        end
    end
    return nil
end

local function findClosestBall(humanoidRootPart)
    local ballsFolder = workspace:FindFirstChild("Balls")
    if not ballsFolder then return nil, math.huge end
    
    local closestBall = nil
    local closestDistance = math.huge
    
    for _, ball in pairs(ballsFolder:GetChildren()) do
        local ballPos = getBallPosition(ball)
        
        if ballPos then
            local distance = (humanoidRootPart.Position - ballPos).Magnitude
            
            if distance < closestDistance then
                closestDistance = distance
                closestBall = ball
            end
        end
    end
    
    return closestBall, closestDistance
end

local function hasPlayerHighlight()
    local playerFolder = workspace:FindFirstChild(LocalPlayer.Name)
    return playerFolder and playerFolder:FindFirstChild("Highlight") ~= nil
end

local function isBallInPlayerRange(ball, distanceRange)
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            local hrp = player.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                local ballPos = getBallPosition(ball)
                
                if ballPos then
                    local distanceToPlayer = (hrp.Position - ballPos).Magnitude
                    if distanceToPlayer <= distanceRange then
                        return true
                    end
                end
            end
        end
    end
    return false
end

-- ============================================
-- INITIALIZE
-- ============================================

createVisualSphere()
createPlayerDetectorSpheres()

-- ============================================
-- MAIN LOOP
-- ============================================

local lastUpdateTime = 0

RunService.Heartbeat:Connect(function()
    local currentTime = tick()
    
    if currentTime - lastUpdateTime < UPDATE_INTERVAL then
        return
    end
    
    lastUpdateTime = currentTime
    
    local character = LocalPlayer.Character
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    local hasHighlight = hasPlayerHighlight()
    local closestBall, closestDistance = findClosestBall(humanoidRootPart)
    
    if autoParryEnabled and closestBall then
        updatePlayerDetectorSpheres()
        
        local ballInDetectorRange = isBallInPlayerRange(closestBall, PLAYER_DETECTOR_DISTANCE)
        local velocity = getBallVelocity(closestBall)
        
        if velocity >= HIGH_SPEED_THRESHOLD then
            if not isHighSpeedMode then
                isHighSpeedMode = true
                currentParryDistance = MAX_DISTANCE
                targetParryDistance = MAX_DISTANCE
                print("🚀 MODO ALTA VELOCIDADE ATIVADO! Velocidade: " .. velocity)
            end
        else
            if isHighSpeedMode then
                isHighSpeedMode = false
                print("✅ Modo alta velocidade desativado")
            end
        end
        
        if ballInDetectorRange and not isAutoParryFrozen then
            isAutoParryFrozen = true
            frozenParryDistance = currentParryDistance
        elseif not ballInDetectorRange and isAutoParryFrozen then
            isAutoParryFrozen = false
        end
        
        if velocity == 0 and not isAutoParryFrozen then
            isAutoParryFrozen = true
            frozenParryDistance = currentParryDistance
        elseif velocity > 0 and isAutoParryFrozen and not ballInDetectorRange then
            isAutoParryFrozen = false
        end
        
        if not isHighSpeedMode then
            targetParryDistance = calculateDistance(velocity)
        end
        
        if not isAutoParryFrozen and not isHighSpeedMode then
            if currentTime - lastDistanceUpdate >= 0.1 then
                if currentParryDistance ~= targetParryDistance then
                    if currentParryDistance < targetParryDistance then
                        currentParryDistance = math.min(currentParryDistance + 0.4, targetParryDistance)
                    elseif currentParryDistance > targetParryDistance then
                        currentParryDistance = math.max(currentParryDistance - 10, targetParryDistance)
                    end
                    lastDistanceUpdate = currentTime
                end
            end
        elseif isAutoParryFrozen then
            currentParryDistance = frozenParryDistance
        end
        
        local speedIndicator = isHighSpeedMode and " 🚀 MAX!" or ""
        
        local speedLabel = createSpeedLabel(closestBall)
        speedLabel.Label.Text = string.format("%.1f%s", velocity, isHighSpeedMode and " 🚀" : "")
        
        if hasHighlight and closestDistance <= currentParryDistance then
            executeParry()
        end
    end
    
    if visualSphere then
        if not visualSphere.Parent then
            createVisualSphere()
        end
        
        visualSphere.Size = Vector3.new(currentParryDistance * 2, currentParryDistance * 2, currentParryDistance * 2)
        visualSphere.Position = humanoidRootPart.Position
        
        if isHighSpeedMode then
            visualSphere.Color = Color3.fromRGB(255, 50, 50)
        else
            visualSphere.Color = Color3.fromRGB(100, 100, 255)
        end
    end
end)

-- ============================================
-- CLEANUP
-- ============================================

LocalPlayer.CharacterRemoving:Connect(function()
    if visualSphere then
        visualSphere:Destroy()
        visualSphere = nil
    end
    clearPlayerDetectorSpheres()
    isHighSpeedMode = false
end)

print("✅ AUTO PARRY SYSTEM ATIVO!")
print("🛡️ Auto Parry com detecção de velocidade 300+")
print("👁️ Sistema sempre ligado - sem GUI")
